<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="cn.cf.dao.B2bWarehouseNumberDao">


	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		pk,type,number,isDelete,storePk,remark,updateTime
	    ]]>
	</sql>

	<insert id="insert" useGeneratedKeys="true" keyProperty="pk">
    <![CDATA[
        INSERT INTO b2b_warehouse_number (
         pk, type, number, isDelete, storePk,remark,updateTime
        ) VALUES (
         #{pk}, #{type}, #{number}, #{isDelete}, #{storePk}   ,#{remark}   ,now()
        )
    ]]>
	</insert>

	<update id="update" parameterType="cn.cf.model.B2bWarehouseNumber">
		UPDATE b2b_warehouse_number
		<set>
			<if test=" type!=null and  type!=''">
				type = #{type} ,
			</if>
			<if test="number !=null and number !=''">
				number = #{number} ,
			</if>
				<if test="remark !=null  ">
				remark = #{remark} ,
			</if>
				 
			<if test="isDelete>0">
				isDelete = #{isDelete} ,
			</if>
		    updateTime = now()
		</set>

		WHERE
		pk = #{pk}
	</update>

	<delete id="delete" parameterType="cn.cf.model.B2bWarehouseNumber">
    <![CDATA[
        DELETE FROM b2b_warehouse_number WHERE
        pk = #{id} 
    ]]>
	</delete>

	<sql id="searchGridWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
			<if test="@Ognl@isNotEmpty(pk)">
				AND pk = #{pk}
			</if>
			<if test="@Ognl@isNotEmpty(type)">
				AND type = #{type}
			</if>
			<if test="@Ognl@isNotEmpty(number)">
				AND number = #{number}
			</if>
			<if test="@Ognl@isNotEmpty(isDelete)">
				AND isDelete = #{isDelete}
			</if>
			<if test="@Ognl@isNotEmpty(storePk)">
				AND storePk = #{storePk}
			</if>
		</where>
	</sql>

	<select id="searchGridCount" parameterType="java.util.Map"
		resultType="int">
		SELECT count(*) FROM b2b_warehouse_number
		<include refid="searchGridWhere" />
	</select>

	<!-- 分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页 因为分页查询将传 offset,pageSize,lastRows 
		三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现 -->
	<select id="searchGrid" resultType="cn.cf.dto.B2bWarehouseNumberDto"
		parameterType="java.util.Map">
		SELECT
		<include refid="columns" />
		FROM b2b_warehouse_number
		<include refid="searchGridWhere" />
		<if test="orderName != null">
			order by ${orderName} ${orderType}
		</if>
		<if test="limit != null">
			limit ${start}, ${limit}
		</if>
	</select>
	<select id="searchList" resultType="cn.cf.dto.B2bWarehouseNumberDto"
		parameterType="java.util.Map">
		SELECT
		<include refid="columns" />
		FROM b2b_warehouse_number
		<include refid="searchGridWhere" />
	</select>
	<select id="getByPk" resultType="cn.cf.dto.B2bWarehouseNumberDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_warehouse_number where pk = #{pk}
	</select>
	<select id="getByType" resultType="cn.cf.dto.B2bWarehouseNumberDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_warehouse_number where type = #{type}
	</select>
	<select id="getByNumber" resultType="cn.cf.dto.B2bWarehouseNumberDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_warehouse_number where number = #{number}
	</select>
	<select id="getByStorePk" resultType="cn.cf.dto.B2bWarehouseNumberDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_warehouse_number where storePk = #{storePk}
	</select>
</mapper>

