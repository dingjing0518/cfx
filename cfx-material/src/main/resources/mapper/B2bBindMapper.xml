<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="cn.cf.dao.B2bBindDao">


	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		pk,bindName,bindProductID,bindProductCount,bindReason,bindProductDetails,bindProductPrice,storePk,storeName,updateTime,insertTime,status,isUpDown
	    ]]>
	</sql>

	<insert id="insert" useGeneratedKeys="true"
		keyProperty="pk">
    <![CDATA[
        INSERT INTO b2b_bind (
         pk, bindName, bindProductID, bindProductCount, bindReason, bindProductDetails, bindProductPrice, storePk,storeName,updateTime, insertTime, status, isUpDown
        ) VALUES (
         #{pk}, #{bindName}, #{bindProductID}, #{bindProductCount}, #{bindReason}, #{bindProductDetails}, #{bindProductPrice}, #{storePk},#{storeName}, #{updateTime}, #{insertTime}, #{status}, #{isUpDown}
        )
    ]]>
	</insert>

	<update id="update" parameterType="cn.cf.model.B2bBind">
    <![CDATA[
        UPDATE b2b_bind SET
	        bindName = #{bindName} , bindProductID = #{bindProductID} , bindProductCount = #{bindProductCount} , bindReason = #{bindReason} , bindProductDetails = #{bindProductDetails} , bindProductPrice = #{bindProductPrice} , storePk = #{storePk} ,storeName = #{storeName} , updateTime = #{updateTime} , insertTime = #{insertTime} , status = #{status} , isUpDown = #{isUpDown}
        WHERE 
        	pk = #{pk}  	        
    ]]>
	</update>

	<delete id="delete" parameterType="cn.cf.model.B2bBind">
    <![CDATA[
        DELETE FROM b2b_bind WHERE
        pk = #{id} 
    ]]>
	</delete>

	<sql id="searchGridWhere">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>
			<if test="@Ognl@isNotEmpty(pk)">
				AND pk = #{pk}			</if>
			<if test="@Ognl@isNotEmpty(bindName)">
				AND bindName = #{bindName}			</if>
			<if test="@Ognl@isNotEmpty(bindProductId)">
				AND bindProductID = #{bindProductId}			</if>
			<if test="@Ognl@isNotEmpty(bindProductCount)">
				AND bindProductCount = #{bindProductCount}			</if>
			<if test="@Ognl@isNotEmpty(bindReason)">
				AND bindReason = #{bindReason}			</if>
			<if test="@Ognl@isNotEmpty(bindProductDetails)">
				AND bindProductDetails = #{bindProductDetails}			</if>
			<if test="@Ognl@isNotEmpty(bindProductPrice)">
				AND bindProductPrice = #{bindProductPrice}			</if>
			<if test="@Ognl@isNotEmpty(storePk)">
				AND storePk = #{storePk}			</if>
			<if test="@Ognl@isNotEmpty(updateTimeBegin)">
				AND updateTime >= #{updateTimeBegin}			</if>
			<if test="@Ognl@isNotEmpty(updateTimeEnd)">
				AND updateTime &lt;= #{updateTimeEnd}			</if>
			<if test="@Ognl@isNotEmpty(insertTimeBegin)">
				AND insertTime >= #{insertTimeBegin}			</if>
			<if test="@Ognl@isNotEmpty(insertTimeEnd)">
				AND insertTime &lt;= #{insertTimeEnd}			</if>
			<if test="@Ognl@isNotEmpty(status)">
				AND status = #{status}			</if>
			<if test="@Ognl@isNotEmpty(isUpDown)">
				AND isUpDown = #{isUpDown}			</if>
		</where>
	</sql>

	<select id="searchGridCount" parameterType="java.util.Map"
		resultType="int">
		SELECT count(*) FROM b2b_bind
		<include refid="searchGridWhere" />
	</select>

	<!-- 分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页 因为分页查询将传 offset,pageSize,lastRows 
		三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现 -->
	<select id="searchGrid" resultType="cn.cf.dto.B2bBindDto"
		parameterType="java.util.Map">
		SELECT
		<include refid="columns" />
		FROM b2b_bind
		<include refid="searchGridWhere" />
	</select>
	<select id="searchList" resultType="cn.cf.dto.B2bBindDto"
		parameterType="java.util.Map">
		SELECT
		<include refid="columns" />
		FROM b2b_bind
		<include refid="searchGridWhere" />
	</select>
	<select id="getByPk" resultType="cn.cf.dto.B2bBindDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_bind where pk = #{pk}	</select>
	<select id="getByBindName" resultType="cn.cf.dto.B2bBindDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_bind where bindName = #{bindName}	</select>
	<select id="getByBindProductId" resultType="cn.cf.dto.B2bBindDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_bind where bindProductID = #{bindProductId}	</select>
	<select id="getByBindReason" resultType="cn.cf.dto.B2bBindDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_bind where bindReason = #{bindReason}	</select>
	<select id="getByBindProductDetails" resultType="cn.cf.dto.B2bBindDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_bind where bindProductDetails = #{bindProductDetails}	</select>
	<select id="getByStorePk" resultType="cn.cf.dto.B2bBindDto"
		parameterType="java.lang.String">
		SELECT
		<include refid="columns" />
		FROM b2b_bind where storePk = #{storePk}	</select>
</mapper>

